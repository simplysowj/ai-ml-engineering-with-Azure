!pip install scikit-learn
!pip install pandas

``````````
import pandas as pd
import numpy as np

# Generate a simple synthetic dataset with problem features and corresponding solutions
np.random.seed(42)
data = {
    'feature1': np.random.choice(['error_A', 'error_B', 'error_C'], size=100),
    'feature2': np.random.choice(['severity_high', 'severity_low'], size=100),
    'solution': np.random.choice(['restart', 'update', 'contact_support'], size=100)
}

df = pd.DataFrame(data)

# Encode categorical features using one-hot encoding
df_encoded = pd.get_dummies(df, columns=['feature1', 'feature2'])

# Explore the dataset
print(df_encoded.head())
print(df_encoded.info())

``````````
from sklearn.model_selection import train_test_split

# Handle missing values by filling them with the median value of each column
df.fillna(df.median(), inplace=True) # Replace missing values in the DataFrame with the median of each column

# Split the dataset into features (X) and labels (y)
X = df_encoded.drop('solution', axis=1)
y = df_encoded['solution']

# Split the data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Note: `X_train` and `y_train` are used to train the model,
# while `X_test` and `y_test` are used to evaluate the model's performance.

``````````
from sklearn.neighbors import KNeighborsClassifier

# Train the KNN recommendation model
knn = KNeighborsClassifier(n_neighbors=3)  # Using 3 neighbors as an example
knn.fit(X_train, y_train)

# Make predictions on the test data
y_pred = knn.predict(X_test)

``````````
from sklearn.metrics import accuracy_score, precision_score, recall_score, f1_score

# Calculate and display accuracy
accuracy = accuracy_score(y_test, y_pred)
print(f"Recommendation Model Accuracy: {accuracy * 100:.2f}%")

# Optional: Calculate additional metrics
precision = precision_score(y_test, y_pred, average='weighted')
recall = recall_score(y_test, y_pred, average='weighted')
f1 = f1_score(y_test, y_pred, average='weighted')
print(f"Precision: {precision:.2f}, Recall: {recall:.2f}, F1 Score: {f1:.2f}")

``````````
# Tune number of neighbors
knn_tuned = KNeighborsClassifier(n_neighbors=5)  # Adjusting to 5 neighbors
knn_tuned.fit(X_train, y_train)

# Evaluate the tuned model
y_pred_tuned = knn_tuned.predict(X_test)
accuracy_tuned = accuracy_score(y_test, y_pred_tuned)
print(f"Improved Model Accuracy with 5 neighbors: {accuracy_tuned * 100:.2f}%")
