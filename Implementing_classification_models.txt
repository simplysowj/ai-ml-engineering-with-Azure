!pip install scikit-learn
!pip install pandas
!pip install matplotlib seaborn

``````````
from sklearn.datasets import load_breast_cancer
import pandas as pd

# Load Breast Cancer dataset and convert to DataFrame
data = load_breast_cancer()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target

# Explore the dataset
print(df.head())
print(df.info())

``````````
from sklearn.model_selection import train_test_split # Import the function to split data into training and testing sets

# Handle missing values if any
df.fillna(df.median(), inplace=True)

# Split dataset into features (X) and target label (y)
X = df.drop('target', axis=1)
y = df['target']

# Split data into training and testing sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Note: `X_train` and `y_train` are used for training the model,
# while `X_test` and `y_test` are used for evaluating the model's performance.

from sklearn.linear_model import LogisticRegression # Import Logistic Regression model from scikit-learn
from sklearn.metrics import accuracy_score # Import accuracy_score function to evaluate the model

# Train the model
log_reg = LogisticRegression(max_iter=1000)  # Increase max_iter to ensure convergence
log_reg.fit(X_train, y_train)

# Make predictions and calculate accuracy
y_pred_log = log_reg.predict(X_test)
accuracy_log = accuracy_score(y_test, y_pred_log)
print(f"Logistic Regression Accuracy: {accuracy_log * 100:.2f}%")

from sklearn.metrics import precision_score, recall_score, f1_score # Import metrics to evaluate model performance

# Calculate weighted precision of the model
precision_log = precision_score(y_test, y_pred_log, average='weighted')

# Calculate weighted recall of the model
recall_log = recall_score(y_test, y_pred_log, average='weighted')

# Calculate weighted F1 score of the model
f1_log = f1_score(y_test, y_pred_log, average='weighted')

# Print the evaluation metrics for the logistic regression model
print(f"Logistic Regression - Precision: {precision_log:.2f}, Recall: {recall_log:.2f}, F1 Score: {f1_log:.2f}")

``````````
from sklearn.tree import DecisionTreeClassifier # Import DecisionTreeClassifier to build a decision tree model

from sklearn.tree import DecisionTreeClassifier # Import DecisionTreeClassifier to build a decision tree model

# Train the model
tree = DecisionTreeClassifier(random_state=42)
tree.fit(X_train, y_train)

# Make predictions and calculate accuracy
y_pred_tree = tree.predict(X_test)
accuracy_tree = accuracy_score(y_test, y_pred_tree)
print(f"Decision Tree Accuracy: {accuracy_tree * 100:.2f}%")


# Calculate weighted precision of the model
precision_log = precision_score(y_test, y_pred_log, average='weighted')

# Calculate weighted recall of the model
recall_log = recall_score(y_test, y_pred_log, average='weighted')

# Calculate weighted F1 score of the model
f1_log = f1_score(y_test, y_pred_log, average='weighted')

# Print the evaluation metrics for the logistic regression model
print(f"Decision Tree - Precision: {precision_log:.2f}, Recall: {recall_log:.2f}, F1 Score: {f1_log:.2f}")

``````````
from sklearn.svm import SVC # Import the Support Vector Classifier (SVC) from scikit-learn

# Train a Support Vector Machine (SVM) model
svm = SVC() # Create an instance of the Support Vector Classifier
svm.fit(X_train, y_train) # Fit (train) the model using the training data (features and labels)

# Make predictions and calculate accuracy
y_pred_svm = svm.predict(X_test) # Use the trained model to predict the labels of the test features

# Evaluate the model's performance
accuracy_svm = accuracy_score(y_test, y_pred_svm) # Calculate the accuracy of the model by comparing predictions to true labels
print(f"SVM Accuracy: {accuracy_svm * 100:.2f}%") # Print the accuracy percentage of the model

# Calculate weighted precision of the model
precision_log = precision_score(y_test, y_pred_log, average='weighted')

# Calculate weighted recall of the model
recall_log = recall_score(y_test, y_pred_log, average='weighted')

# Calculate weighted F1 score of the model
f1_log = f1_score(y_test, y_pred_log, average='weighted')

# Print the evaluation metrics for the logistic regression model
print(f"SVM - Precision: {precision_log:.2f}, Recall: {recall_log:.2f}, F1 Score: {f1_log:.2f}")

``````````
from sklearn.metrics import precision_score, recall_score, f1_score # Import metrics to evaluate model performance

# Calculate weighted precision of the model
precision_log = precision_score(y_test, y_pred_log, average='weighted')

# Calculate weighted recall of the model
recall_log = recall_score(y_test, y_pred_log, average='weighted')

# Calculate weighted F1 score of the model
f1_log = f1_score(y_test, y_pred_log, average='weighted')

# Print the evaluation metrics for the logistic regression model
print(f"Logistic Regression - Precision: {precision_log:.2f}, Recall: {recall_log:.2f}, F1 Score: {f1_log:.2f}")
