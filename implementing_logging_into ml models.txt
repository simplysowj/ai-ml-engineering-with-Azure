import logging

# Set up logging to a file with INFO level
logging.basicConfig(filename='ml_pipeline.log', level=logging.INFO)

# Confirm logging setup
logging.info("Logging setup complete.")

``````````
import pandas as pd
from sklearn.datasets import load_iris

# Log start of data loading
logging.info("Loading Iris dataset...")

# Load the Iris dataset and convert it to a DataFrame
data = load_iris()
df = pd.DataFrame(data.data, columns=data.feature_names)
df['target'] = data.target

logging.info("Iris dataset loaded successfully.")

# Log start of preprocessing
logging.info("Starting data preprocessing...")

# Handle missing values (not needed for Iris, but shown as an example)
df.fillna(0, inplace=True)
logging.info("Checked for missing values (none found in Iris dataset).")

# Log completion of preprocessing
logging.info("Data preprocessing completed.")

``````````
from sklearn.tree import DecisionTreeClassifier
from sklearn.model_selection import train_test_split

# Split data into training and testing sets
X = df.drop('target', axis=1)
y = df['target']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# Log the start of model training
logging.info("Starting model training...")

try:
    # Train the Decision Tree model
    model = DecisionTreeClassifier()
    model.fit(X_train, y_train)
    logging.info("Model trained successfully.")
except Exception as e:
    logging.error(f"Error during model training: {e}")

# Log training accuracy
accuracy_train = model.score(X_train, y_train)
logging.info(f"Training accuracy: {accuracy_train:.2f}")

``````````
# Log the start of predictions
logging.info("Starting model predictions...")

try:
    # Make predictions on the test set
    predictions = model.predict(X_test)
    logging.info("Predictions made successfully.")
except Exception as e:
    logging.error(f"Error during predictions: {e}")

# Log a sample of the predictions
logging.info(f"Sample predictions: {predictions[:5]}")